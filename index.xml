<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>始于迁至</title>
    <link>https://Antking001.github.io/</link>
    <description>Recent content on 始于迁至</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Mar 2023 09:58:36 +0800</lastBuildDate><atom:link href="https://Antking001.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>操作系统</title>
      <link>https://Antking001.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 09 Mar 2023 09:58:36 +0800</pubDate>
      
      <guid>https://Antking001.github.io/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</guid>
      <description>预防死锁 破坏互斥条件：将临界资源改造为可共享资源（SPOOling技术）
缺点：可行性不高，很多时候无法破坏互斥条件
破坏不剥夺条件： 申请资源得不到满足，立即释放所拥有的所有资源
申请的资源被其它进程占用，由操作系统协助剥夺（考虑优先级）
缺点：实现复杂，剥夺资源可能导致部分工作实效：反复申请和释放导致系统开销大；可能导致饥饿
破坏请求和保持条件 ：运行前分配好所需的资源，之后一直保持
缺点：资源利用率低，可能导致饥饿
破坏循环等待条件：给资源编号从小到大的顺序申请资源
缺点：不方便增加新设备；会导致资源浪费：用户编程麻烦
避免死锁 安全序列：如果系统按照当前这种序列分配资源，则每个进程都能顺利完成。只要能找出一个安全序列，系统就是安全状态。当然安全序列可能有多个。如果分配了系统资源之后系统找不出任何一个安全序列，洗头就进入了不安全状态。这就意味着之后的所有进程可能都无法顺利的执行下去，当然，如果有序列提前归还了一些资源，那系统也就有可能重新回到安全状态，但我们在分配资源之前总是要考虑到最坏的情况。
如果系统处于安全状态，就一定不会发生死锁，如果系统进入不安全状态，就有可能发生死锁（处于安全不安全状态未必发生死锁，但在发生死锁时一定是在不安全状态）
银行家算法 核心思想：在进程提出资源时，先预判此次分配是否会导致系统进入不安全状态。如果会进入不安全状态，就暂时不答应这次请求，让该进程阻塞等待。 在计算机系统当中有多种资源时，可以将一维的数字扩展为多维的向量。
算法步骤：
检查此次申请是否超过了之前声明的最大需求数 看出此时系统剩余的可用资源是否还能满足这次请求 试探着分配，更改数据结构 用安全性算法检查此次分配是否会导致系统进入不安全状态 安全性算法步骤：检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列，并把该进程持有的资源全部回收。不断重复上述过程，看最终是否能够让所有进程都加入安全序列。</description>
    </item>
    
    <item>
      <title>计算机网络</title>
      <link>https://Antking001.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Tue, 07 Mar 2023 21:05:31 +0800</pubDate>
      
      <guid>https://Antking001.github.io/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>物理层 主要任务：确定与传输媒体接口有关的特性 机械特性：规定物理的特性，如采用规格，接口形状，引线数目，引脚数量和排列情况。 电气特性：规定传输二进制时，线路上的电压范围，阻抗匹配，传输速率和距离限制等。 功能特性：指明某条线上出现的某一电平表示何种意义，接口部件的信号线用途。 规程特性：定义各条物理线路的工作规程和时许关系 数据通信的相关术语 数据：传送信息的实体。 信号：数据的电气/电磁的表现，时数据在传输过程中的存在形式。 信源：产生和发送数据的源头。 信宿：接收数据的终点 信道：信号传送的媒介，一般用来表示传送信息的介质，因此一条通信信道通常包含一条一条发送信道和接受信道。 信道 传输信号: 模拟信道（传递模拟信号） 数字信道（传递数字信号） 传输介质: 无线信道 有线信道 三种通信方式 单工通信：只有一个方向通信而没有反方向的交互，仅需一条信道。 半双工通信：通信双方都可以发送货接受信息，任何一方都不能同时发送和接受，需要两天信道。 全双工通信：通信双发可以同时发送和接受信息，也需要两条信道。 两种数据传输方式 串行传输：速度慢，费用低，适合远距离 并行传输，速度快，费用高，适合近距离，主要用于计算机内部传输 码元， 波特，速率，带宽 码元：指用一个固定时长的信号波形，代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号成为k进制码元，而该时长称为码元宽度。当码元的离散状态有M个时，此时码元为M（M大于2）、进制码元。如：4进制码元：码元的离散状态有4种，即4中高低状态不同的波形00，01，10，11
码元传输数率：又称码元速率，波形数率，调制数率，符号数率等，它表示单位时间内数字通信系统所传输等码元个数（脉冲个数或者信号变化的次数），单位数波特（Baud）。1波特表示数字通信系统每秒传输一个码元，这里码元可以是多进制的，也可以是二进制的，但码元速率与进制数无关。
信息传输速率：又称信息速率，比特率，表示单位时间内数字通信系统传输的二进制码元个数（极比特数），单位是比特/秒（b/s）。
若一个码元携带n个bit的信息量，则M个Baud的码元传输速率锁对应的信息传输数率为M * n bit/s。
奈氏准则和香浓定理 信道带宽：是信道能通过的最高频率和最低频率之差。
码间串扰：接受端收到的信号失去码元之间清晰界限的现象。 奈氏准则：在理想低通（无噪音，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为2W Baud，W是信道带宽，单位是Hz。
在任何信道中，码元传输速率是有上限的。若传输速率超过此上限，就会出现严重的码间串扰问题，使接受端对码元的完全正确识别成为不可能。
信道的带宽越宽（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输。
奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制
由于每个码元的传输速率受奈氏准则的制约，所有要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法。
信噪比 = 信号的平均功率/噪声的平均功率， 常记为S/N，并用分贝（db）作为度量单位。
香农定理：在带宽受限且有噪音的信道中，为了不产生误差，信息的数据传输速率有上限值。 信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。
对一定对传输带块的一定的信噪比，信息传输速率的上限就确定了。
只要信息的传输速率低于信道的极限传输速率，就一定可以找到某种方法来实现无差错的传输。
香农定理的出的为极限传输速率，实际信道能达到的传输速率要比它低不少。
从香农定理可以看出，若信道带宽W或信噪比S/N没有上限（不可能），那么信道的极限信息传输速率也就没有上限。
基带信号与宽带信号 基带信号：将数字信号0和1直接用两种不同的电压表示，再送到数字信道上去传输（基带传输）。 来自信源的信号，想计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号，比如说我们说话的声波就是基带信号。
宽带信号：将基带信号进行调制后形成频分复用模拟信号，再传送到模拟信道上去传输（带宽传输）。 把基带信号经过载波调制后，把信号频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道）。
在距离较近时，计算机采用基带传输方式（近距离衰减小，从而信号不容易发生变化）
在距离较远时，计算机采用宽带传输方式（近距离衰减大，即使信号变化大也能最后过滤出来基带信号）
编码与调制 数据 &amp;mdash;&amp;ndash;&amp;gt; 数字信号 编码 数据 &amp;mdash;&amp;ndash;&amp;gt; 模拟信号 调制 </description>
    </item>
    
  </channel>
</rss>
